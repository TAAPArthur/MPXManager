#!/bin/bash
#================================================================
# HEADER
#================================================================
#%Usage: ${SCRIPT_NAME} [ACTION]
#%MPX aware window manager
#%
#%
#%Action:
#%    --hash                        Displays git hash
#%    --help, -h                    Print this help
#%    --mode, -m                    run with a predefined settings. Valid options are: xmousecontrol
#%    --name                        Name of executable
#%    --path                        Path to the config file
#%    --quit                        Exists a running instance
#%    --recompile                   Recompile with program. Needed for changes to config to be loaded
#%    --restart                     Restart the program
#%    --send=<name=value>, -s       send argument(s) to running instance (can be called multiple times)
#%    --set=<name=value>            set argument(s) for new instances (can be called multiple times)
#%    -v, --version                 Print script information
#%
#%Modes:
#%Each mode is a non-WM feature
#%      xmousecontrol enables control of the mouse with the keyboard
#%      mpx-start   loads mpx config file, creates masters and attaches slaves to the appropriate masters
#%      mpx-stop    removes all non-default masters
#%      mpx-restart mpx-stop and mpx-start
#%      mpx-restore   Like mpx-start but does not create any new masters
#%      mpx-split   takes all slaves that are sending events and add them to a newly created master. To make the timeout longer, change the value of POLL_COUNT/POLL_INTERVAL via --set
#%
#% EXIT STATUS
#%       The following exit values shall be returned:
#%
#%               0     Successful completion.
#%               1     Display related error liking not being able to find the XServer or an X command failing
#%               64    System call failed
#%               65    Another WM is already running
#%               66    WM is not responding to a request
#%               67    An invalid option was specified
#%               68    Validation failed
#%
#%Examples:
#%    ${SCRIPT_NAME}              #start the window manager
#%    ${SCRIPT_NAME} --set="VAR=VALUE"             #start the window manager and set VAR to VALUE
#%    ${SCRIPT_NAME} --send="VAR=VALUE"             #set VAR to VALUE for a running instance
#%
#================================================================
#- IMPLEMENTATION
#-    version         ${SCRIPT_NAME} (taaparthur.no-ip.org) ${VERSION}
#-    author          Arthur Williams
#-    license         MIT
#================================================================
# END_OF_HEADER
#================================================================
#MAN generated with help2man -No mpxmanager.1 ./mpxmanager.sh

set -e
[ -z "$DEBUG" ] || set -xe

VERSION=1.2.0
GIT_HASH=

displayHelp(){
    SCRIPT_HEADSIZE=$(head -200 ${0} |grep -n "^# END_OF_HEADER" | cut -f1 -d:)
    SCRIPT_NAME="$(basename ${0})"
    head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#[%+]" | sed -e "s/^#[%+-]//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g" ;
    head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#[%+]" | sed -e "s/^#[%+-]//g" -e "s/\${VERSION}/${VERSION} ${GIT_HASH}/g" ;
}

run(){
    exec $MPXMANAGER_HOME/$MPXMANAGER_BIN_NAME $@
}
displayVersion(){
    echo $VERSION
}
displayHash(){
    echo $GIT_HASH
}

MPXMANAGER_BIN_NAME=${MPXMANAGER_BIN_NAME:-mpxmanager}
MPXMANAGER_HOME=${MPXMANAGER_HOME:-$HOME/.config/mpxmanager}
MPXMANAGER_CONFIG=${MPXMANAGER_CONFIG:-$MPXMANAGER_HOME/config.cpp}
MPXMANAGER_LAST_COMPILED_VERSION=$MPXMANAGER_HOME/.last_compiled_verision
optspec=":vhs-:"


getopts "$optspec" optchar || run $@
    case "${optchar}" in
        -)
            case "${OPTARG}" in
                hash)
                    displayHash
                    ;;
                help)
                    displayHelp
                    ;;
                name)
                    echo $MPXMANAGER_BIN_NAME
                    ;;
                path)
                    echo $MPXMANAGER_HOME
                    ;;
                recompile)
                    mkdir -p $MPXMANAGER_HOME
                    shift
                    [ -f $MPXMANAGER_CONFIG ] || cp /usr/share/mpxmanager/sample-config.cpp $MPXMANAGER_CONFIG
                    export CXX=
                    export CPPFLAGS=
                    export LDFLAGS=
                    if [[ ! -f $MPXMANAGER_LAST_COMPILED_VERSION || "$GIT_HASH" != $(cat $MPXMANAGER_LAST_COMPILED_VERSION) ]]; then
                        make -f /usr/share/mpxmanager/sample-makefile -C $MPXMANAGER_HOME clean
                        echo -n $GIT_HASH > $MPXMANAGER_LAST_COMPILED_VERSION
                    fi

                    make -f /usr/share/mpxmanager/sample-makefile -C $MPXMANAGER_HOME $* $MPXMANAGER_BIN_NAME
                    ;;
                version)
                    displayVersion
                    ;;
                *)
                    run $@
                    ;;
            esac;;
        v)
            displayVersion
            ;;
        h)
            displayHelp
            ;;
        *)
            run $@
            ;;
    esac
